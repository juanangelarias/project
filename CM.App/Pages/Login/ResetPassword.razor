@page "/resetPassword"

@using Microsoft.AspNetCore.Components.Authorization
@using CM.App.Helper.Model

@layout LoginLayout

@inject IUserService UserService
@inject IGeneralStateProvider State
@inject AuthenticationStateProvider Authentication
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudGrid Justify="Justify.Center">
    <MudItem xs="6"> @*sm="4" md="3">*@
        <EditForm Model="@_data"
                  OnValidSubmit="OnValidSubmit"
                  OnInvalidSubmit="OnInvalidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Outlined="true" 
                     Elevation="7">
                <MudCardHeader Style="justify-content: center; background-color: #0B409C;">
                    <MudImage Src="resources/logot.png" Style="width: 150px; height: 150px;"/>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6">User: @User</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Password"
                                          InputType="InputType.Password"
                                          Class="mt-3"
                                          Variant="Variant.Filled"
                                          @bind-value="_data.NewPassword"
                                          For="@(()=>_data.NewPassword)"/>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Confirm"
                                          InputType="InputType.Password"
                                          Class="mt-3"
                                          Variant="Variant.Filled"
                                          @bind-value="_data.Confirm"
                                          For="@(()=>_data.Confirm)"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto">
                        Submit
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Reset"
                               Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               Class="ml-auto"
                               OnClick="GoBack">
                        Cancel
                    </MudButton>
                </MudCardActions>
            </MudCard>
            
            @if (!_success)
            {
                <MudItem xs="4">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">
                            Validation Summary
                        </MudText>
                        <MudText Color="@Color.Error">
                            <ValidationSummary/>
                        </MudText>
                    </MudPaper>
                </MudItem>
            }
        </EditForm>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; } = string.Empty;
    
    private bool _success = true;
    public PasswordModel _data = new();
    public string User { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            var response = await UserService.GetUserFromToken(Token);

            if (response == null)
            {
                Snackbar.Add("The mail has expired. Please contact the conference administrator", Severity.Error);
            }
            else
            {
                User = $"{response.FullName} ({response.Email})";

                _data = new PasswordModel
                {
                    Username = response.Email,
                    FullName = response.FullName,
                    NewPassword = string.Empty,
                    Confirm = string.Empty
                };

            }

            StateHasChanged();
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var request = new CM.Model.General.ResetPassword
        {
            UserName = _data.Username,
            Password = _data.NewPassword,
            NewPassword = _data.NewPassword
        };
        
        var response = await UserService.ResetPassword(request);
        if (response is true)
        {
            Snackbar.Add("Password changed successfully.", Severity.Info);
            _success = true;
            StateHasChanged();
            Navigation.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Something went wrong, please try again. If the problem persist contact support.", Severity.Error);
            _success = false;
        }
    }
    
    private void OnInvalidSubmit()
    {
        _success = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        _success = true;
        StateHasChanged();
        Navigation.NavigateTo("/");
    }
}